1. What is the difference between a web server and a web container?
A "web server" is anything that responds to HTTP requests; ie. anything that serves web pages. Apache, Apache/Tomcat, IIS and JBoss/Tomcat are all examples of web servers. A "web container" is a web-based, runtime environment to support J2EE components. Just as a "servlet container" (such as provided by Tomcat) is a runtime environment for Java servlets.
2. What is a servlet?
A servlet is a Java programming language class that is used to extend the capabilities of servers that host applications accessed by means of a request-response programming model.
3. How do web servers and web containers interact with servlets?
When someone says “web server” you often think HTTP-centric, web UI oriented applications. When someone says “Application server” you may think “heavier loads, enterprise features, transactions and queuing, multi-channel communication (HTTP + more)”. But mostly it is the same product that serves both sets of requirements now-a-days.
4. Who creates request objects?
Service
5. What are the states in the servlet lifecycle?
The entire life cycle of a Servlet is managed by the Servlet container which uses the javax.servlet.Servlet interface to understand the Servlet object and manage it.
6. Who calls init and when?
The servlet is initialized by calling the init() method
7. Which of init, service, and doGet should you override?
Service method should not be overridden otherwise developer is responsible for consequences.
8. In what sense are servlets multi-threaded?
A Java servlet container / web server is typically multithreaded.
9. What are the implications of this for servlet instance variables?
The container does not create a new instance of the Servlet class for each request. It reuses an existing one. This is why they are not thread safe.
